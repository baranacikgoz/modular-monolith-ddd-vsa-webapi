name: mm-local-development

services:
  host:
    image: ${DOCKER_REGISTRY-}host
    container_name: mm.host
    restart: "no"
    build:
      context: .
      dockerfile: src/Host/Dockerfile
    networks:
      - local_shared_network
    ports:
      - 5001:5001
    depends_on:
      - mm.database
      # - mm.rabbitmq
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5001
      - DatabaseOptions__ConnectionString=Server=mm.database;Port=5432;Database=modular-monolith-db;User Id=postgres;Password=postgres;Include Error Detail=true
      - EventBusOptions__UseInMemoryEventBus=true
      - ObservabilityOptions__AppVersion=1.0.0
      - ObservabilityOptions__OtlpLoggingEndpoint=http://mm.otel-collector:4317
      - ObservabilityOptions__OtlpLoggingProtocol=Grpc
      - ObservabilityOptions__LogGeneratedSqlQueries=true
      - ObservabilityOptions__EnableMetrics=true
      - ObservabilityOptions__OtlpMetricsUsePrometheusDirectly=false
      - ObservabilityOptions__OtlpMetricsEndpoint=http://mm.otel-collector:4317
      - ObservabilityOptions__OtlpMetricsProtocol=Grpc
      - ObservabilityOptions__EnableTracing=true
      - ObservabilityOptions__OtlpTracingEndpoint=http://mm.otel-collector:4317
      - ObservabilityOptions__OtlpTracingProtocol=Grpc
      - JwtOptions__AccessTokenExpirationInMinutes=1440
      - CachingOptions__UseRedis=false
      - CachingOptions__Redis__Host=mm.redis
      - CachingOptions__Redis__Port=6379
      - CachingOptions__Redis__Password=admin
      - CachingOptions__Redis__AppName=modular-monolith-

  mm.database:
    image: postgres:latest
    container_name: mm.database
    restart: "no"
    volumes:
      - ./.containers/mm.database:/var/lib/postgresql/data
    networks:
      - local_shared_network
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres

  # mm.redis:
  #   image: redis/redis-stack:latest
  #   container_name: mm.redis
  #   restart: "no"
  #   volumes:
  #     - ./.containers/mm.redis:/data
  #   networks:
  #     - local_shared_network
  #   ports:
  #     - 6379:6379
  #     - 8001:8001 
  #   environment:
  #     - REDIS_PASSWORD=admin
  #   command: redis-server --requirepass admin

  mm.jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: mm.jaeger
    restart: "no"
    networks:
      - local_shared_network
    ports:
      - "6831:6831/udp" # UDP port for Jaeger agent
      - "16686:16686" # Web UI
      - "14268:14268" # HTTP port for spans
      - "4444:4317" # OTLP gRPC receiver for jaeger
      - "5555:4318"
    volumes:
      - ./.containers/mm.jaeger/data:/badger/data
      - ./.containers/mm.jaeger/wal:/badger/wal

  mm.prometheus:
    container_name: mm.prometheus
    image: prom/prometheus
    restart: "no"
    networks:
      - local_shared_network
    ports:
      - 9090:9090
    volumes:
      - ./.containers/mm.prometheus:/prometheus
      - ./observability/prometheus:/etc/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      # - --web.config.file=/etc/prometheus/web.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles

  mm.postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: mm.postgres-exporter
    restart: "no"
    networks:
      - local_shared_network
    ports:
      - 9187:9187  # Expose PostgreSQL exporter metrics
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:postgres@mm.database:5432/postgres?sslmode=disable

  mm.grafana:
    container_name: mm.grafana
    image: grafana/grafana
    restart: "no"
    networks:
      - local_shared_network
    ports:
      - 3000:3000
    environment:
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./.containers/mm.grafana:/var/lib/grafana
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
      - ./observability/grafana/dashboards:/var/lib/grafana/dashboards
      # - ./observability/grafana/grafana.ini:/etc/grafana/grafana.ini
    depends_on:
      - mm.prometheus

  mm.otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: mm.otel-collector
    networks:
      - local_shared_network
    ports:
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP HTTP receiver"
      - "9464:9464" # Prometheus exporter port
    volumes:
      - ./observability/otel-collector-config.yml:/etc/otel-collector-config.yml
    command: ["--config=/etc/otel-collector-config.yml"]

  mm.seq:
    image: datalust/seq:latest
    container_name: mm.seq
    restart: "no"
    networks:
      - local_shared_network
    ports:
      - 5341:80
    volumes:
      - ./.containers/mm.seq:/data
    environment:
      - ACCEPT_EULA=Y

networks:
  local_shared_network:
    external: true
