name: CI/CD Workflow

env:
  SERVICE_NAME: modular-monolith-ddd-vsa-webapi

on:
  push:
  workflow_dispatch:
    inputs:
      tag:
        description: "Give a tag that will be used for the docker image, then a deployment will be triggered."
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.x'

      - name: Remove docker-compose.dcproj # See https://github.com/dotnet/sdk/issues/35134
        run: |
          cp ModularMonolith.sln Temp_ModularMonolith.sln
          dotnet sln ModularMonolith.sln remove ./docker-compose.dcproj
        
      - name: Restore dependencies
        run: dotnet restore ModularMonolith.sln
        
      - name: Build
        run: dotnet build ModularMonolith.sln --configuration Release --no-restore
        
      - name: Test
        run: dotnet test ModularMonolith.sln --configuration Release --no-restore --verbosity normal

      - name: Revert removal of docker-compose.dcproj # See https://github.com/dotnet/sdk/issues/35134
        run: |
          rm ModularMonolith.sln
          mv Temp_ModularMonolith.sln ModularMonolith.sln

  deploy_to_docker_registry:
    needs: build
    if: >
      startsWith(github.ref, 'refs/heads/main') ||
      startsWith(github.ref, 'refs/heads/release/') ||
      startsWith(github.ref, 'refs/heads/hotfix/') ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Extract Version from Branch or Tag Name
        run: |
          if [ -z "${{ github.event.inputs.tag }}" ]; then
            REF_NAME=${GITHUB_REF#refs/*/}
            VERSION=${REF_NAME#*/}
          else
            VERSION=${{ github.event.inputs.tag }}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Build and Push
        uses: docker/build-push-action@v5
        with:
          file: src/Host/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.SERVICE_NAME }}:${{ env.VERSION }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.SERVICE_NAME }}:latest

  deploy_to_server:
    needs: deploy_to_docker_registry
    if: >
      startsWith(github.ref, 'refs/heads/main') ||
      startsWith(github.ref, 'refs/heads/release/') ||
      startsWith(github.ref, 'refs/heads/hotfix/') ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Install Cloudflared on Runner
        run: |
          sudo mkdir -p --mode=0755 /usr/share/keyrings
          curl -fsSL https://pkg.cloudflare.com/cloudflare-main.gpg | sudo tee /usr/share/keyrings/cloudflare-main.gpg >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared any main' | sudo tee /etc/apt/sources.list.d/cloudflared.list
          sudo apt-get update && sudo apt-get install -y cloudflared

      - name: Set Up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/server_rsa
          chmod 600 ~/.ssh/server_rsa

      - name: Configure SSH for Cloudflare Tunnel
        run: |
          mkdir -p ~/.ssh
          cat <<EOF >> ~/.ssh/config
          Host ${{ secrets.SERVER }}
            IdentityFile ~/.ssh/server_rsa
            User ${{ secrets.SSH_USER }}
            ProxyCommand cloudflared access ssh --hostname %h
          EOF
          chmod 600 ~/.ssh/config

      - name: Deploy Updated Web API to Server
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SERVER }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # Export global variables on the remote host
            export SERVICE_NAME="${{ env.SERVICE_NAME }}"
            export VERSION="${{ env.VERSION }}"
            export USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
            cd /${SERVICE_NAME}
            # Update the docker-compose file image tag
            sed -i "s|${USERNAME}/${SERVICE_NAME}:[^ ]*|${USERNAME}/${SERVICE_NAME}:${VERSION}|" docker-compose.yml
            # Log in to Docker Hub
            docker login --username ${USERNAME} --password ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
            # Pull and restart the container
            docker compose pull ${SERVICE_NAME}
            docker compose stop ${SERVICE_NAME} || true
            docker compose rm ${SERVICE_NAME} || true
            docker compose up -d --no-deps ${SERVICE_NAME}
